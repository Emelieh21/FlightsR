setAPIKey <- function(){
key <- readline(prompt="Please enter your FlightStats API Key and hit enter: ")
text <- paste0("flightstats_api_key=", key, "\n")
env <- Sys.getenv("flightstats_api_key")
if (!file.exists(file.path(normalizePath("~/"), ".Renviron"))){
file.create(file.path(normalizePath("~/"), ".Renviron"), showWarnings = TRUE)
}
if (!identical(env, "")) {
renv <- readLines(file.path(normalizePath("~/"), ".Renviron"))
loc <- grep("flightstats_api_key", renv)
renv[loc] <- text
Sys.setenv(flightstats_api_key = key)
writeLines(renv, file.path(normalizePath("~/"), ".Renviron"))
}
else {
Sys.setenv(flightstats_api_key = key)
cat(text, file = file.path(normalizePath("~/"), ".Renviron"),
append = TRUE)
}
}
setAppId <- function(){
key <- readline(prompt="Please enter your FlightStats AppID and hit enter: ")
text <- paste0("flightstats_app_id=", key, "\n")
env <- Sys.getenv("flightstats_app_id")
if (!file.exists(file.path(normalizePath("~/"), ".Renviron"))){
file.create(file.path(normalizePath("~/"), ".Renviron"), showWarnings = TRUE)
}
if (!identical(env, "")) {
renv <- readLines(file.path(normalizePath("~/"), ".Renviron"))
loc <- grep("flightstats_app_id", renv)
renv[loc] <- text
Sys.setenv(flightstats_app_id = key)
writeLines(renv, file.path(normalizePath("~/"), ".Renviron"))
}
else {
Sys.setenv(flightstats_app_id = key)
cat(text, file = file.path(normalizePath("~/"), ".Renviron"),
append = TRUE)
}
}
listAirlines <- function(activeOnly=TRUE){
ID = Sys.getenv("flightstats_app_id")
if (ID == ""){
stop("Please set your FlightStats AppID and API Key with the setAPIKey() and setAppId() function. You can obtain these from https://developer.flightstats.com.")
}
KEY = Sys.getenv("flightstats_api_key")
if (ID == ""){
stop("Please set your FlightStats AppID and API Key with the setAPIKey() and setAppId() function. You can obtain these from https://developer.flightstats.com.")
}
if(missing(activeOnly)){
choice = "active"
}
if(activeOnly == FALSE) {
choice = "all"
}
else {
choice = "active"
}
link = paste0("https://api.flightstats.com/flex/airlines/rest/v1/json/",choice,"?appId=",ID,"&appKey=",KEY)
dat = getURL(link)
dat_list <- fromJSON(dat)
airlines <- dat_list$airlines
return(airlines)
}
listAirports <- function(activeOnly=TRUE){
ID = Sys.getenv("flightstats_app_id")
if (ID == ""){
stop("Please set your FlightStats AppID and API Key with the setAPIKey() and setAppId() function. You can obtain these from https://developer.flightstats.com.")
}
KEY = Sys.getenv("flightstats_api_key")
if (ID == ""){
stop("Please set your FlightStats AppID and API Key with the setAPIKey() and setAppId() function. You can obtain these from https://developer.flightstats.com.")
}
if(missing(activeOnly)){
choice = "active"
}
if(activeOnly == FALSE) {
choice = "all"
}
else {
choice = "active"
}
link = paste0("https://api.flightstats.com/flex/airports/rest/v1/json/",choice,"?appId=",ID,"&appKey=",KEY)
dat = getURL(link)
dat_list <- fromJSON(dat)
airports <- dat_list$airports
return(airports)
}
scheduledFlights <- function(airport, action, date, hour, silent = FALSE){
ID = Sys.getenv("flightstats_app_id")
if (ID == ""){
stop("Please set your FlightStats AppID and API Key with the setAPIKey() and setAppId() function. You can obtain these from https://developer.flightstats.com.")
}
KEY = Sys.getenv("flightstats_api_key")
if (ID == ""){
stop("Please set your FlightStats AppID and API Key with the setAPIKey() and setAppId() function. You can obtain these from https://developer.flightstats.com.")
}
if (nchar(hour) > 2){
stop("Hour format not correct, please provide the hour in 1 or 2 digits - full hours only (no minutes)")
}
if (as.numeric(hour) > 24){
stop("Hour not correct, only 24 hours in the day. Please provide the hour in 1 or 2 digits - full hours only (no minutes)")
}
if (nchar(hour) < 2){
hour = paste0("0",hour)
}
presentable_time = paste0(hour,":00")
airport = toupper(airport)
action = action
date = date
check <- paste0(substr(date,5,5),substr(date,8,8))
if (check != "//"){
stop("Date format not correct, please provide YYYY/MM/DD",call. = TRUE, domain = NULL)
}
if (action == "departing"){
from_to = "from"
}
if (action == "arriving"){
from_to = "to"
}
link = paste0("https://api.flightstats.com/flex/schedules/rest/v1/json/",from_to,"/",airport,"/",action,"/",date,"/",hour,"?appId=",ID,"&appKey=",KEY)
dat <- getURL(link)
dat_list <- fromJSON(dat)
schedule <- as.data.frame(dat_list$scheduledFlights)
if (nrow(schedule) < 1){
if (silent == FALSE){
print(paste0("No flights found for ",dat_list$appendix$airports$name[1], " in ",dat_list$appendix$airports$countryName[1]," on ", date," at ",presentable_time))
}
} else {
if (silent == FALSE){
print(paste0(nrow(schedule)," flights found ",action, " ",from_to, " ",dat_list$appendix$airports$name[dat_list$appendix$airports$iata==toupper(airport)], " in ",dat_list$appendix$airports$countryName[dat_list$appendix$airports$iata==toupper(airport)]," on ", date," at ",presentable_time))
}
airlines <- dat_list$appendix$airlines
airports <- dat_list$appendix$airports
merge_airports <- airports[,c("fs","name", "countryCode")]
names(merge_airports)<- c("fs","DepartureAirportName","DeparturecountryCode")
schedule <- merge(schedule, merge_airports, by.x="departureAirportFsCode", by.y="fs", all.x=TRUE)
names(merge_airports)<- c("fs","ArrivalAirportName","ArrivalcountryCode")
schedule <- merge(schedule, merge_airports, by.x="arrivalAirportFsCode", by.y="fs", all.x=TRUE)
merge_airlines <- airlines[,c("fs", "name")]
names(merge_airlines) <- c("AirlineFs", "CarrierName")
schedule <- merge(schedule, merge_airlines, by.x="carrierFsCode", by.y="AirlineFs", all.x=TRUE)
}
return(schedule)
}
scheduledFlightsFullDay <- function(airport, action, date){
hours <- c(0:23)
result = data.frame()
pb <- progress_bar$new(
format = " Running [:bar] :percent eta: :eta",
total = length(hours), clear = FALSE, width= 60)
for (hour in hours){
dat <- scheduledFlights(airport, action, date, hour, silent = TRUE)
x <- names(dat)
drop <- c("arrivalTerminal","wetleaseOperatorFsCode","departureTerminal")
x <- x[!(x %in% drop)]
dat <- dat[,x]
result <- rbind(result,dat)
pb$tick()
}
return(result)
}
searchAirline <- function(value){
ID = Sys.getenv("flightstats_app_id")
if (ID == ""){
stop("Please set your FlightStats AppID and API Key with the setAPIKey() and setAppId() function. You can obtain these from https://developer.flightstats.com.")
}
KEY = Sys.getenv("flightstats_api_key")
if (ID == ""){
stop("Please set your FlightStats AppID and API Key with the setAPIKey() and setAppId() function. You can obtain these from https://developer.flightstats.com.")
}
link = paste0("https://api.flightstats.com/flex/airlines/rest/v1/json/iata/",toupper(value),"?appId=",ID,"&appKey=",KEY)
dat <- getURL(link)
dat_list <- fromJSON(dat)
result <- dat_list$airlines
if (length(result)==0){
warning("Please make sure that you provide a valid airline IATA code.")
}
return(result)
}
searchAirport <- function(by, value){
ID = Sys.getenv("flightstats_app_id")
if (ID == ""){
stop("Please set your FlightStats AppID and API Key with the setAPIKey() and setAppId() function. You can obtain these from https://developer.flightstats.com.")
}
KEY = Sys.getenv("flightstats_api_key")
if (ID == ""){
stop("Please set your FlightStats AppID and API Key with the setAPIKey() and setAppId() function. You can obtain these from https://developer.flightstats.com.")
}
link = paste0("https://api.flightstats.com/flex/airports/rest/v1/json/",by,"/",toupper(value),"?appId=",ID,"&appKey=",KEY)
dat <- getURL(link)
dat_list <- fromJSON(dat)
result <- dat_list$airports
if (length(result)==0){
warning("Please make sure that \'by\' is set to \'iata\', \'icao\' or \'countryCode\'.")
}
return(result)
}
package.skeleton(name = "FlightsR", list = c("listAirlines","listAirports","scheduledFlights","scheduledFlightsFullDay","searchAirline","searchAirport","setAPIKey","setAppId"))
library(FlightsR)
